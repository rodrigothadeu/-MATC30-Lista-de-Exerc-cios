import random

def activityNotifications(expenditure, d):
    from bisect import insort, bisect_left

    def get_mediana(janela):
        n = len(janela)
        meio = n // 2
        if n % 2 == 0:
            return (janela[meio - 1] + janela[meio]) / 2 # Se par: média dos dois centrais
        else:
            return janela[meio] # Se ímpar: retorna o elemento central

    notificacoes = 0
    janela = sorted(expenditure[:d]) 

    for i in range(d, len(expenditure)):
        mediana = get_mediana(janela)
        if expenditure[i] >= 2 * mediana:
            notificacoes += 1

        # Remove o gasto mais antigo
        antigo = expenditure[i - d]
        index = bisect_left(janela, antigo)
        del janela[index]

        # Insere o novo gasto mantendo a ordem
        insort(janela, expenditure[i])

    return notificacoes

# Código Base
def gerar_dados(n, max_val=200):
    return [random.randint(0, max_val) for _ in range(n)]

def main():
    n, d = 10, 5
    gastos = gerar_dados(n)
    print(f"n = {n}, d = {d}")
    print("Gastos:", gastos)
    resultado = activityNotifications(gastos, d)
    print("Notificações:", resultado)

if __name__ == '__main__':
    main()
